global
function math(context) {
	return context.scopes.findLastIndex(s => s.startsWith("meta.math")) > context.scopes.findLastIndex(s => s.startsWith("comment") || s.startsWith("meta.text.normal.tex"));
}

function dollarSign(context) {
	return context.scopes.findLastIndex(s => s.startsWith("meta.math")) <= 2;
}

function cap(word) {
	return word.charAt(0).toUpperCase() + word.substring(1);
}

function myget(list, key) {
	if (list.has(key)) return list.get(key);
	else return key
}

const envArr = [];
envArr.push(new Set([
	"align\*",
	"answer",
	"claim",
	"conjecture",
	"explanation",
	"intuition",
	"notation",
	"note",
	"notice",
	"observation",
	"problem",
	"question",
	"recap",
	"remark",
	"solution",
	"ncorollary",
	"ndefinition",
	"nexample",
	"nexercise",
	"nexplanation",
	"nlemma",
	"nproof",
	"nproperty",
	"nproposition",
	"ntheorem",
	])); // "simple" environments

envArr.push(new Set([
	"align\*",
	"answer",
	"claim",
	"conjecture",
	"explanation",
	"intuition",
	"notation",
	"note",
	"notice",
	"observation",
	"problem",
	"question",
	"recap",
	"remark",
	"solution",
	])); // "unnumbered" environments

envArr.push(new Map([
	["ncorollary", "corollary"],
	["ndefinition", "definition"],
	["nexample", "example"],
	["nexercise", "exercise"],
	["nexplanation", "explanation"],
	["nlemma", "lemma"],
	["nproof", "proof"],
	["nproperty", "property"],
	["nproposition", "proposition"],
	["ntheorem", "theorem"],
	])); 
	
const phrDict = new Map([
	["wrt", "with regard to"],
	["s.t.", "such that"],
	["lhs", "left hand side"],
	["rhs", "right hand side"],
	]);

const lisArr = [];
lisArr.push(new Map([
	["list", "itemize"],
	["blist", "itemize"],
	["alist", "enumerate"],
	["nlist", "enumerate"],
	["ilist", "enumerate"],
	]));
lisArr.push(new Map([
	["list", "[label=(--)]"],
	["blist", ""],
	["alist", ""],
	["nlist", "[label=(\\arabic*)]"],
	["ilist", "[label=(\\textit{\\roman*})]"],
	]));

const typDict = new Map([
	["^_", "overline"],
	["^.", "dot"],
	["^^", "hat"],
	["^>", "vec"],
	["^~", "widetilde"],
	["mbb", "mathbb"],
	["mbf", "mathbf"],
	["mbm", "bm"],
	["mcal", "mathcal"],
	["mfrk", "mathfrak"],
	["mrm", "mathrm"],
	["mscr", "mathscr"],
	["bold", "textbf"],
	["emphasis", "emph"],
	["italic", "textit"],
	["strike", "sout"],
	]);
	
const symDict = new Map([
	["--", "setminus" ],
	["-+", "mp" ],
	["->", "to"],
	["::", "colon" ],
	[":=", "coloneqq" ],
	["!<", "nless"],
	["!<=", "nleq"],
	["!=", "neq" ],
	["!>", "ngtr"],
	["!>=", "ngeq"],
	["!|-", "nvDash"],
	["!||", "nmid" ],
	["...", "dots" ],
	["'", "prime"],
	["@>", "hookrightarrow" ],
	["*", "ast"],
	["+-", "pm" ],
	["<->", "leftrightarrow"],
	["<<", "ll"],
	["<=", "leq"],
	["=:", "eqqcolon" ],
	["=<", "impliedby"],
	["==", "equiv" ],
	["=>", "implies"],
	[">=", "geq"],
	[">>", "gg"],
	["|-", "vDash"],
	["|=", "models"],
	["|>", "mapsto"],
	["||", "mid" ],
	["~-", "simeq" ],
	["~=", "cong" ],
	["~>", "leadsto"],
	["~~", "approx" ],
	["ems", "varnothing"],
	["o*", "otimes" ],
	["o+", "oplus" ],
	["\\\\", "\\\\\n" ],
	]);

const limDict = new Map([
	["absl", "\\vert"],
	["absr", "\\vert"],
	["Absl", "\\left\\vert"],
	["Absr", "\\right\\vert"],
	["ceill", "\\lceil"],
	["ceilr", "\\rceil"],
	["Ceill", "\\left\\lceil"],
	["Ceilr", "\\right\\rceil"],
	["floorl", "\\lfloor"],
	["floorr", "\\rfloor"],
	["Floorl", "\\left\\lFloor"],
	["Floorr", "\\right\\rFloor"],
	["lral", "\\left\\langle"],
	["lrar", "\\right\\rangle"],
	["lrbl", "\\left["],
	["lrbr", "\\right]"],
	["lrcl", "\\left{"],
	["lrcr", "\\right}"],
	["lrpl", "\\left("],
	["lrpr", "\\right)"],
	["norml", "\\lVert"],
	["normr", "\\rVert"],
	["Norml", "\\left\\lVert"],
	["Normr", "\\right\\rVert"],
	["cap", "bigcap"],
	["Cap1", "i"],
	["Cap2", " = "],
	["Cap3", "1"],
	["cup", "bigcup"],
	["Cup1", "i"],
	["Cup2", " = "],
	["Cup3", "1"],
	["lim1", "n"],
	["lim2", " \\to "],
	["lim3", "\\infty"],
	["prod1", "i"],
	["prod2", ""],
	["Prod1", "i"],
	["Prod2", " = "],
	["Prod3", "1"],
	["sum1", "i"],
	["sum2", ""],
	["Sum1", "i"],
	["Sum2", " = "],
	["Sum3", "1"],
	]);

const argDict = new Map([
	["bin", "binom"],
	["choose", "binom"],
	["text", "text"],
	["^\\^", "overset"],
	["__", "underset"],
	["//", "frac"],
	]);

endglobal

context dollarSign(context)
snippet `(?<!\\)\$(?!.)` "Inline Math" A
\\( $1 \\)$0
endsnippet

context !math(context)
snippet dm "Display Math" A
\\[
	$1
\\]$0
endsnippet

snippet \\ "New Line" iA
\\\\
$0
endsnippet

snippet {} "Literal Curly Brackets" iA
\\{ $1 \\}$0
endsnippet

snippet \beg "Create Enviroment" iA
\\begin{${1:example}}
	$2
\\end{${1:example}}$0
endsnippet

snippet fig "Figure Environment" bA
\\begin{figure}[${1:H}]
	\\centering
	\\includegraphics[width=0.8\textwidth]{$2}
	\\caption{$3}
	\\label{Figure $4}
\\end{figure}
endsnippet

snippet `\\(n)?codeblock` "Code Enviroment" A
\\begin{lstlisting}[``rv = m[1] ? "numbers=none, " : ""``language=${1:C}]
	$0
\\end{lstlisting}
endsnippet

snippet `\\([abin]?list)(\d)` "List Environments" A
``
let name = myget(lisArr[0], m[1]), label = myget(lisArr[1], m[1]);
let order = 1;
let r =  "\\begin{" + name + "}" + label + "\n";
	for (let i = 0; i < m[2]; i++)
		r += "	\\item " + snip.tabstop(order++) + "\n";
	r += "\\end{" + name + "}";
rv = r;
``$0
endsnippet

snippet `\\(n?(?:corollary|definition|example|exercise|explanation|lemma|proof|property|proposition|theorem)|(?:align\*|answer|claim|conjecture|intuition|notation|note|notice|observation|problem|question|recap|remark|solution|split))` "Common Environments" A
``
let name = myget(envArr[2], m[1]), label = cap(name) + " \\the" + name;
let toc = envArr[0].has(m[1]), num = !envArr[1].has(m[1]);
let order = 1;
let r =  "\\begin{" + name + "}"
	r += (toc ? "" : "[" + snip.tabstop(order) + "]") 
	r += (num ? "\\label{" + label + "}" : "") + "\n";
    r += (toc ? "" : "\\addcontentsline{toc}{subsection}{\\texorpdfstring{" + label + " \\ - " + snip.tabstop(order++) + "}{}}\n");
	r += snip.tabstop(order) + "\n";
	r += "\\end{" + name + "}";
rv = r;
``$0
endsnippet

snippet `(wrt|s\.t\.|lhs|rhs)` "Phrases" A
``rv = myget(phrDict, m[1])``$0
endsnippet

priority 1
context math(context)
snippet `(?<![\\a-zA-Z])(alpha|beta|[gG]amma|[dD]elta|(?:[eE]|vare)psilon|eta|zeta|(?:[tT]|vart)heta|iota|kappa|[lL]ambda|[mn]u|[xX]i|[pP](?:i|si)|(?:r|varr)ho|[sS]igma|tau|[uU]psilon|(?:[pP]|varp)hi|chi|[oO]mega)` "Greek Characters" A
\\``rv = m[1]``$0
endsnippet

priority 1
context math(context)
snippet `(?<![\\a-zA-Z])(aleph|ast|ell|exists|infty|forall|lnot|nabla|partial|prime|qed|star|triangle|varnothing)` "Priority Characters" A
\\``rv = m[1]``$0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])((?:arc)?(?:cos|cot|csc|sec|sin|tan)|approx|b(?:igcap|igcup|igwedge|igvee)|c(?:ap|irc|olon|oloneqq|ong|up)|[cdv]?dots?|e(?:quiv|qqcolon)|i(?:ff|mpliedby|mplies|nf|nt)|g(?:cd|eq)|l(?:and|angle|eq|eft|n|og|or)|m(?:apsto|ax|id|in|odels)|n(?:eq|geq|leq|mid|otin|vDash|subseteq|supseteq)|o(?:plus|times)|perp|r(?:angle|ight)|s(?:etminus|im|imeq|qcup|ubset|ubseteq|ubsetneq|up|upset|upseteq|upsetneq)|t(?:imes|op)|v(?:Dash|ee)|wedge)` "Math Macros" A
\\``rv = m[1]``$0
endsnippet

context math(context)
snippet `(?<![a-zA-Z])((?:arc)?(?:cos|cot|csc|sec|sin|tan)|bigcap|bigcup|exp|inf|int|gcd|lim|ln|log|max|min|pmod|prod|sum|sup)(_(?:{.*}|[^{\s]|\\[a-zA-Z]+)(?:\^(?:{.*}|[^{\s]|\\[a-zA-Z]+))?|\^(?:{.*}|[^{\s]|\\[a-zA-Z]+)(?:_(?:{.*}|[^{\s]|\\[a-zA-Z]+))?)?  ` "Function Auto-Brackets" A
``rv = m[1] + (m[2] ? m[2] : "")``\\left( $1 \\right)$0
endsnippet

context math(context)
snippet `(m(?:bb|bf|bm|cal|frk|rm|scr)|\^[_.^>~]|text)` "Math Types" A
\\``rv = myget(typDict, m[1])``{$1}$0
endsnippet

snippet `\\(bold|chapter|emphasis|italic|section|underline|strike)` "Non-math Types" A
\\``rv = myget(typDict, m[1])``{$1}$0
endsnippet

context math(context)
snippet `(-[-+>]|:[:=]|!(?:[<>=]|<=|>=|\|-|\|\|)|\.\.\.|@>|\+-|<(?:->|[<=])|=[:<=>]|>[=>]|\|[-=>|]|~[-=>~]|ems|o[+*])` "Symbols" A
\\``rv = myget(symDict, m[1])``$0
endsnippet

context math(context)
snippet `(l(?:ra|rp|rc|rb)|[cC]eil|[fF]loor|[aA]bs|[nN]orm|<>)` "Dynamic Limiters" A
``rv = myget(limDict, (m[1] + "l")) + " " + snip.tabstop(1) + " " + myget(limDict, (m[1] + "r"))``$0
endsnippet

context math(context)
snippet `([_^])(['*])` "Quick Symbols" A
``rv = m[1]``{ \``rv = myget(symDict, m[2])``$1 }$0
endsnippet

context math(context)
snippet `\\([_^])` "Manual Sup/Subscript" A
``rv = m[1]``{ $1 }$0
endsnippet

context math(context)
snippet `(?<=[a-zA-Z\d)}|\]])([_^])([a-zA-Z\d\\+-](?:[a-zA-Z\d+-]+| , )|(\(.*\))|((?:[a-zA-Z\d]|{.*})\1(?:[a-zA-Z\d]|\(.*\)|[\\+-][a-zA-Z\d]+)))` "Auto Sup/Subscript" A
``
let br = m[3] || m[4];
let pmn = m[2].search(/[+-]/g);
let pm = pmn != -1;
let inner = br ? m[2] : (pm ? m[2].substring(0, pmn) + " " + m[2].substring(pmn) : m[2]);
let r = m[1] + "{" + inner + snip.tabstop(1) + "}";
rv = r;
``$0
endsnippet

context math(context)
snippet `\\piecewise([2-9])` "Piecewise Functions" A
\\begin{dcases}
``
let order = 1, r = "";
for (var i = 0; i < m[1] - 1; i++)
	r += "	" + snip.tabstop(order++) + ", &\\text{ if } " + snip.tabstop(order++) + " ; \n";
r += "	" + snip.tabstop(order) + ", &\\text{ otherwise.}"
rv = r;
``
\\end{dcases}$0
endsnippet

context math(context)
snippet `(n)?sqrt` "Roots" A
\``rv = m[1] ? "sqrt[" + snip.tabstop(1) + "]" : "sqrt"``{$2}$0
endsnippet

context math(context)
snippet `(\d)?(p)?dif` "Differentials" A
``
let name =  m[2] ? "partial" : "mathrm{d}";
rv = "\\frac{\\" + name + (m[1] ? "^{" + m[1] + "} " : " ") + snip.tabstop(1) + "}{\\" + name + " " + snip.tabstop(2, "x") + (m[1] ? "^{" + m[1] + "}}" : "}")
``$0
endsnippet

context math(context)
snippet dint "Definite Integral" A
\int_{${1:-\infty}}^{${2:\infty}} ${3} \,\mathrm{d}${4:x}$0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])([Ss]um|[Pp]rod|lim|Cup|Cap)` "Sums, Limits, Products" A
``
let upper = m[1] === cap(m[1]);
let order = 1;
let name = myget(limDict, m[1].toLowerCase());
let one = myget(limDict, m[1] + "1"), two = myget(limDict, m[1] + "2");
let r =  "\\" + name + "\\limits_{" + snip.tabstop(order++, one) + two
let three = m[1] == "lim" || upper ? snip.tabstop(order++, myget(limDict, m[1] + "3")) : "";
let four = upper ? "^{" + snip.tabstop(order++, "\\infty") + "}" : "";
	r += three + "}" + four
rv = r;
``$0
endsnippet

context math(context)
snippet `(//|__|\^\\\^|(bin)|(choose))` "Two Argument Expansions" A
\``rv = myget(argDict, m[1])``{$1}{$2}$0
endsnippet

context math(context)
snippet `(eval)` "Three Argument Expansions" A
\``rv = myget(argDict, m[1])``{$1}{$2}{$3}$0
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])op([rnl])` "Create an Operator" A
``
let order = 1;
let r = "\\mathop{\\mathrm{" + snip.tabstop(order++) + "}}";
let lim = m[1] == "n" ? "\\nolimits" + snip.tabstop(order++) : m[1] == "l" ? snip.tabstop(order++) : "";
	r += lim + "(" + snip.tabstop(order) + ")";
rv = r;
``$0
endsnippet

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction, no ()" A
\frac{``rv = m[1]``}{$1}$0
endsnippet

snippet `^.*\)/` "Fraction, with ()" A
``
let str = m[0].slice(0, -1);
let depth = 0;
let i = str.length - 1;
while (true) {
	if (str[i] == ')') depth += 1;
	if (str[i] == '(') depth -= 1;
	if (depth == 0) break;
	i -= 1;
}
let r = str.slice(0, i) + "\\frac{" + str.slice(i + 1, -1) + "}";
rv = r;
``{$1}$0
endsnippet

context math(context)
snippet `array([1-9]{1})\ ([1-9]{1})` "Array environment" ibA
\begin{array}{``
	let len = m[2];
	let results = "";
	for(var i=0; i<len; i++){
		results += "c"
	}
	rv = results;
	``}
	``
	let order = 1;
	let nrow = m[1];
	let ncol = m[2];
	for (var i=0; i<nrow-1; i++){
		for(var j = 0;j <ncol-1;j++){
			rv += `${snip.tabstop(order)} & `;
			order ++;
		}
		rv += ` ${snip.tabstop(order)} \\\\`+ `\\`+ `\n` + `	`;
		order ++;
	}
	for(var j = 0;j <ncol-1;j++){
		rv += `${snip.tabstop(order)} & `;
		order ++;
	}
	rv += ` ${snip.tabstop(order)} \\\\`+ `\\`;
	``
\end{array}
endsnippet

context math(context)
snippet `(b|p)matrix([1-9]{1})\ ([1-9]{1})` "matrix" iwA
\begin{``rv = m[1]``matrix}``
	let order = 1;
	let nrow = m[2];
	let ncol = m[3];
	rv = `\n`;
	for (var i=0; i<nrow; i++){
		rv += '	';
		for(var j = 0;j <ncol-1;j++){
			rv += `${snip.tabstop(order)} & `;
			order ++;
		}
		rv += ` ${snip.tabstop(order)} \\\\`+ `\\`+ `\n`;
		order ++;
	}
	``\end{``rv = m[1]``matrix}$0
endsnippet

snippet `table(m)?([1-9]{1})\ ([1-9]{1})` "Tables" A
\begin{table}[H]
	\centering
	\begin{tabular}{``
	let len = m[3];
	let math = m[1] == "m";
	let results = "c";
	for(var i=0; i<len-2; i++){
		results += "c"
	}
	results += "c";
	rv = results;
	``}
	    \toprule
			``
			let order = 1;
			nrow = m[2];
			ncol = m[3];
			for (var i=0; i<nrow-1; i++){
				for(var j = 0;j <ncol-1;j++){
					rv += (math ? `\\( ` : "") + `${snip.tabstop(order+2)} ` + (math ? `\\) ` : "") + `& `;
					order ++;
				}	
				rv += (math ? ` \\(` : "")  + ` ${snip.tabstop(order+2)}` + (math ? ` \\)` : "") + ` \\\\`+ `\\`+ `\n`;
				order ++;
				if(i == 0){
					rv += `		\\midrule` + `\n`;
				}
				rv += `			`;
			}	
			for(var j = 0;j <ncol-1;j++){
				rv += (math ? `\\( ` : "") + `${snip.tabstop(order+2)} ` + (math ? `\\) ` : "") + `& `;
				order ++;
			}
			rv += (math ? ` \\(` : "") + ` ${snip.tabstop(order+2)}` + (math ? ` \\)` : "") + ` \\\\` + `\\`;
			``
    	\bottomrule
	\end{tabular}
	\caption{${2:caption}}
	\label{Table \thetable}
\end{table}$0
endsnippet
