global
function math(context) {
	const mathFunctionLastIndex = context.scopes.findLastIndex(s => s.startsWith("meta.math")),
		normalFunctionlastIndex = context.scopes.findLastIndex(s => s.startsWith("comment") || s.startsWith("meta.text.normal.tex"));
	return mathFunctionLastIndex > normalFunctionlastIndex;
}

function list(context) {
	const listFunctionLastIndex = context.scopes.findLastIndex(s => s.startsWith("meta.function.environment.list"));
	return listFunctionLastIndex > -1;
}

function dollarSign(context) {
	let numMathFunctions = 0;
	context.scopes.forEach(v => v.startsWith("meta.math") && numMathFunctions++);
	const mathFunctionLastIndex = context.scopes.findLastIndex(s => s.startsWith("meta.math")),
		metaFunctionLastIndex = context.scopes.findLastIndex(s => s.startsWith("meta.function")),
		metaFunctionFirstIndex = context.scopes.findIndex(s => s.startsWith("meta.function"));
	return numMathFunctions < 2 && (mathFunctionLastIndex < 4 || (metaFunctionLastIndex > 2 && mathFunctionLastIndex - metaFunctionFirstIndex > 1));
}

function capitaliseWord(word) {
	return word.charAt(0).toUpperCase() + word.substring(1);
}

function getReplacement(list, key) {
	if (list.has(key)) return list.get(key);
	else return key
}

const environmentNameArray = [];
environmentNameArray.push(new Set([
	"align\*",
	"answer",
	"claim",
	"conjecture",
	"explanation",
	"intuition",
	"ncorollary",
	"ndefinition",
	"nexample",
	"nexercise",
	"nexplanation",
	"nlemma",
	"notation",
	"note",
	"notice",
	"nproof",
	"nproperty",
	"nproposition",
	"ntheorem",
	"mcorollary",
	"mdefinition",
	"mexample",
	"mexercise",
	"mexplanation",
	"mlemma",
	"mproof",
	"mproperty",
	"mproposition",
	"mtheorem",
	"observation",
	"problem",
	"question",
	"recap",
	"remark",
	"solution",
	])); // "simple" environments

environmentNameArray.push(new Set([
	"align\*",
	"answer",
	"claim",
	"conjecture",
	"explanation",
	"intuition",
	"notation",
	"note",
	"notice",
	"observation",
	"problem",
	"question",
	"recap",
	"remark",
	"solution",
	])); // "unnumbered" environments

environmentNameArray.push(new Map([
	["ncorollary", "corollary"],
	["ndefinition", "definition"],
	["nexample", "example"],
	["nexercise", "exercise"],
	["nexplanation", "explanation"],
	["nlemma", "lemma"],
	["nproof", "proof"],
	["nproperty", "property"],
	["nproposition", "proposition"],
	["ntheorem", "theorem"],
	["mcorollary", "corollary"],
	["mdefinition", "definition"],
	["mexample", "example"],
	["mexercise", "exercise"],
	["mexplanation", "explanation"],
	["mlemma", "lemma"],
	["mproof", "proof"],
	["mproperty", "property"],
	["mproposition", "proposition"],
	["mtheorem", "theorem"],
	])); 
	
const phrasesArray = new Map([
	["lhs", "left hand side"],
	["rhs", "right hand side"],
	["s.t.", "such that"],
	["wrt", "with regard to"],
	]);

const listTypeArray = [];
listTypeArray.push(new Map([
	["alist", "enumerate"],
	["blist", "itemize"],
	["dlist", "itemize"],
	["ilist", "enumerate"],
	["nlist", "enumerate"],
	["list", "enumerate"],
	]));
listTypeArray.push(new Map([
	["alist", "[label=(\\alph*)]"],
	["blist", ""],
	["dlist", "[label=--]"],
	["ilist", "[label=(\\textit{\\roman*})]"],
	["nlist", "[label=(\\arabic*)]"],
	["list", ""],
	]));

const textTypeArray = new Map([
	["^_", "overline"],
	["^.", "dot"],
	["^2.", "ddot"],
	["^3.", "dddot"],
	["^4.", "ddddot"],
	["^^", "hat"],
	["^>", "vec"],
	["^~", "widetilde"],
	["bold", "textbf"],
	["emphasis", "emph"],
	["italic", "textit"],
	["mbb", "mathbb"],
	["mbf", "mathbf"],
	["mbm", "bm"],
	["mcal", "mathcal"],
	["mfrk", "mathfrak"],
	["mrm", "mathrm"],
	["mscr", "mathscr"],
	["strike", "sout"],
	]);
	
const symbolNameArray = new Map([
	["--", "setminus"],
	["-+", "mp"],
	["->", "to"],
	["::", "colon"],
	[":=", "coloneqq"],
	["!<", "nless"],
	["!<=", "nleq"],
	["!=", "neq"],
	["!>", "ngtr"],
	["!>=", "ngeq"],
	["!|-", "nvDash"],
	["!||", "nmid"],
	["...", "dots"],
	["'", "prime"],
	["@>", "hookrightarrow"],
	["*", "ast"],
	["\\\\", "\\\\\n"],
	["+-", "pm"],
	["<->", "leftrightarrow"],
	["<-->", "longleftrightarrow"],
	["<=>", "Leftrightarrow"],
	["<==>", "Longleftrightarrow"],
	["<<", "ll"],
	["<=", "leq"],
	["=:", "eqqcolon"],
	["=<", "impliedby"],
	["==", "equiv"],
	["=>", "implies"],
	[">=", "geq"],
	[">>", "gg"],
	["|-", "vDash"],
	["|=", "models"],
	["|>", "mapsto"],
	["||", "mid"],
	["|\\", "parallel"],
	["~-", "simeq"],
	["~=", "cong"],
	["~>", "leadsto"],
	["~~", "approx"],
	["ems", "varnothing"],
	["o*", "otimes"],
	["o+", "oplus"],
	["\\T", "intercal"],
	]);

const limitSymbolsArray = new Map([
	["Absl", "\\left\\vert"],
	["absl", "\\vert"],
	["Absr", "\\right\\vert"],
	["absr", "\\vert"],
	["cap", "bigcap"],
	["Cap1", "i"],
	["Cap2", " = "],
	["Cap3", "1"],
	["ceill", "\\lceil"],
	["Ceill", "\\left\\lceil"],
	["ceilr", "\\rceil"],
	["Ceilr", "\\right\\rceil"],
	["cup", "bigcup"],
	["Cup1", "i"],
	["Cup2", " = "],
	["Cup3", "1"],
	["Floorl", "\\left\\lFloor"],
	["floorl", "\\lfloor"],
	["floorr", "\\rfloor"],
	["Floorr", "\\right\\rFloor"],
	["lim1", "n"],
	["lim2", " \\to "],
	["lim3", "\\infty"],
	["lral", "\\left\\langle"],
	["lrar", "\\right\\rangle"],
	["lrbl", "\\left["],
	["lrbr", "\\right]"],
	["lrcl", "\\left\\{"],
	["lrcr", "\\right\\\\}"],
	["lrpl", "\\left("],
	["lrpr", "\\right)"],
	["lrpv", "\\left|"],
	["lrpv", "\\right|"],
	["Norml", "\\left\\lVert"],
	["norml", "\\lVert"],
	["Normr", "\\right\\rVert"],
	["normr", "\\rVert"],
	["prod1", "i"],
	["Prod1", "i"],
	["Prod2", " = "],
	["prod2", ""],
	["Prod3", "1"],
	["sum1", "i"],
	["Sum1", "i"],
	["Sum2", " = "],
	["sum2", ""],
	["Sum3", "1"],
	["<>l", "\\langle"],
	["<>r", "\\rangle"],
	]);

const argumentFunctionArray = new Map([
	["__", "underset"],
	["//", "frac"],
	["^\\^", "overset"],
	["bin", "binom"],
	["choose", "binom"],
	["color", "textcolor"],
	["colour", "textcolor"],
	["text", "text"],
	]);

endglobal

priority 2
context dollarSign(context)
snippet `(?<!\\)\$(?!.)` "Inline Math" A
\\( $1 \\)
endsnippet

priority 2
context math(context)
snippet `(?<!\\)\$(?!.)` "Explicit Dollar Sign" A
\\\$
endsnippet

priority 2
context !math(context)
snippet dm "Display Math" A
\\[
	$1
\\]

endsnippet

priority 2
snippet \\ "New Line" iA
\\\\

endsnippet

priority 2
snippet {} "Explicit Curly Brackets" iA
\\{ $1 \\}
endsnippet

snippet \beg "Create Enviroment" iA
\\begin{${1:example}}$2
	$3
\\end{${1:example}}

endsnippet

snippet \hyref "Create Reference" iA
\\hyperref[$1]{$1}
endsnippet

snippet fig "Figure Environment" bA
\\begin{figure}[${1:H}]
	\\centering
	\\includegraphics[width=0.8\textwidth]{$2}
	\\caption{$3}
	\\label{Figure $4}
\\end{figure}

endsnippet

snippet \codeblock "Code Environment" iA
\\begin{lstlisting}[language=${1:C++}]
	$0
\\end{lstlisting}

endsnippet

context !math(context)
snippet `(\d)column` "Multicol Environment" A
\\begin{multicols}{``rv = m[1]``}
[\\texorpdfstring{
$1
}{}\vspace{-15px}]
``
let order = 2,
	r = "";
	for (let i = 1; i < m[1]; i++)
		r += snip.tabstop(order++) + "\n\\vfill\\columnbreak\n";
	r += snip.tabstop(order++) + "\n\\columnbreak";
	rv = r;
``
\end{multicols}\vspace{-15px}
endsnippet

context math(context)
snippet `(?:(?<=[\(\[\s])([^\s\(\[]+))?(\d)\.{2}` "List of Terms" iA
``
const term = m[1] ? m[1].replaceAll("\}", "\\\}") : "";
let order = 1,
	r = "";
	for (let i = 1; i <= m[2]; i++)
		r += `${snip.tabstop(order++, (term ? `${term}_${i}` : ""))}, `;
	r += `\\dots, ${snip.tabstop(order, (term ? `${term}_k` : ""))}`;
	rv = r;
``
endsnippet

snippet `\\([abin]?list)(\d)` "List Environments" A
``
const name = getReplacement(listTypeArray[0], m[1]),
	label = getReplacement(listTypeArray[1], m[1]);
let	order = 1,
	r = `\\begin{${name}}${label}\n`;
	for (let i = 0; i < m[2]; i++)
		r += `	\\item ${snip.tabstop(order++)}\n`;
	r += `\\end{${name}}`;
	rv = r;
``
endsnippet

context list(context)
snippet `(?<=\\item ).*(?:\\item)$` "Add List Item (Single Line)" A
``
const fixedBrackets = m[0].replace("\\item", "").replaceAll("\\\}", "\\\\\}").replaceAll("\}", "\\\}").replaceAll(/(?<=\s)\\\\(?=\s)/g, "\\\\\\\\");
rv = snip.tabstop(1, fixedBrackets) + "\n\\item ";
``
endsnippet

context list(context)
snippet `^((?:\s)*)(?:\\item )((.|\n))*(?:\\item)$` "Add List Item (Multi-line)" MA
``
const fixedBrackets = m[0].replaceAll("\\\}", "\\\\\}").replaceAll("\}", "\\\}").replaceAll(/(?<=\s)\\\\(?=\s)/g, "\\\\\\\\");
let firstLineWhitespace = m[1];
const splitByLineTrimmed = fixedBrackets.split("\n").map((e) => {
		const nonWhite = e.search(/[^\s]/g);
		if (nonWhite != -1 && nonWhite < firstLineWhitespace.length)
			firstLineWhitespace = e.substring(0, e.search(/[^\s]/g));
		return e;
		}),
	rejoinedFormatted = splitByLineTrimmed.join("\n");
let counter = 0,
	index = rejoinedFormatted.length,
	output = "",
	begs = rejoinedFormatted.lastIndexOf("\\begin{enumerate\\}", index),
	ends = rejoinedFormatted.lastIndexOf("\\end{enumerate\\}", index),
	items = rejoinedFormatted.lastIndexOf("\\item", index - 6);

if (items > begs && items > ends) {
	const sliced = rejoinedFormatted.slice(0, -5);
	index = sliced.lastIndexOf("\\item", index);
	output = sliced.slice(0, index + 6) + snip.tabstop(1, sliced.slice(index + 6)) + "\n" + firstLineWhitespace + "\\item ";
}

while (!output && (begs != -1 || ends != -1)) {
	begs = rejoinedFormatted.lastIndexOf("\\begin{enumerate\\}", index);
	ends = rejoinedFormatted.lastIndexOf("\\end{enumerate\\}", index);
	if (ends > begs) {
		counter++;
		index = ends - 1;
	} else if (begs > ends) {
		counter--;
		index = begs - 1;
	}
	if (counter < 0) {
		output = rejoinedFormatted;
		counter = 0;
	} else if (counter == 0) {
		items = rejoinedFormatted.lastIndexOf("\\item", index);
		begs = rejoinedFormatted.lastIndexOf("\\begin{enumerate\\}", index);
		ends = rejoinedFormatted.lastIndexOf("\\end{enumerate\\}", index);
		if (items > begs && items > ends) {
			index = rejoinedFormatted.lastIndexOf("\\item", index);
			firstLineWhitespace = "";
			let i = index - 1;
			while (rejoinedFormatted.charAt(i) != '\n' && /\s/.test(rejoinedFormatted.charAt(i))) {
				firstLineWhitespace += rejoinedFormatted.charAt(i);
				i--;
			}
			output = rejoinedFormatted.slice(0, index + 6) + snip.tabstop(1, rejoinedFormatted.slice(index + 6, -5)) + "\n" + firstLineWhitespace + "\\item";
		}
	}
}
if (!counter && !output)
	output = snip.tabstop(1, rejoinedFormatted.slice(0, -5)) + "\n" + firstLineWhitespace + "\\item ";
else if (counter && !output)
	output = rejoinedFormatted;

rv = output;
``
endsnippet

snippet `\\(([nm])?(?:corollary|definition|example|exercise|explanation|lemma|proof|property|proposition|theorem)|(?:align\*|answer|claim|conjecture|intuition|notation|note|notice|observation|problem|question|recap|remark|solution|split))` "Common Environments" A
``
const name = getReplacement(environmentNameArray[2], m[1]),
	label = capitaliseWord(name) + " \\the" + name,
	toc = !environmentNameArray[0].has(m[1]), 
	nam = m[2] == 'm', 
	num = !environmentNameArray[1].has(m[1]);
let	order = 1;
	rv = `\\begin{${name}}`
	+ `${(toc ? `[\\texorpdfstring{${snip.tabstop(order)}}{}]` : "")}` 
	+ `${(num ? `\\label{${label}}\n` : "")}` 
	+ `${(toc ? `\\addcontentsline{toc}{subsection}{\\texorpdfstring{${label} \\ - ${snip.tabstop(order++)}}{}}\n` : "")}`
	+ `${(nam ? `\\addcontentsline{toc}{subsection}{\\texorpdfstring{${label}}{}}\n` : "")}`
	+ `${num ? "" : "\n"}${snip.tabstop(order)}\n`
	 + `\\end{${name}}`;
``

endsnippet

snippet `(wrt|s\.t\.|lhs|rhs)` "Phrases" A
\\text{``rv = getReplacement(phrasesArray, m[1])``}
endsnippet

priority 1
context math(context)
snippet `(?<![\\a-zA-Z])(alpha|beta|chi|[dD]elta|epsilon|z?eta|[gG]amma|iota|kappa|[lL]ambda|[mn]u|[oO]mega|[pP][hs]?i|rho|[sS]igma|tau|[tT]heta|[uU]psilon|var(?:epsilon|kappa|phi|pi|rho|sigma|theta)|[xX]i)` "Greek Characters" A
\\``rv = m[1]``
endsnippet

priority 1
context math(context)
snippet `(?<![\\a-zA-Z])(aleph|ast|because|ell|emptyset|exists|infty|int|iint|iiint|forall|lnot|nabla|oint|parallel|partial|prime|propto|qed|square|star|therefore|triangle|varnothing)` "Priority Characters" A
\\``rv = m[1]``
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])(not)?((?:arc)?(?:cos|cot|csc|sec|sin|tan)|approx|b(?:igcap|igcup|igwedge|igvee)|c(?:ap|irc|olon|oloneqq|ong|ross|up)|[cdv]?dots?|e(?:quiv|qqcolon)|i(?:ff|mpliedby|mplies|n|nf)|g(?:cd|eq)|l(?:and|angle|eq|eft|n|og|or)|m(?:apsto|ax|id|in|odels)|n(?:eq|geq|leq|mid|otin|vDash|subseteq|supseteq)|o(?:plus|times)|perp|r(?:angle|ight)|s(?:etminus|im|imeq|qcup|ubset|ubseteq|ubsetneq|up|upset|upseteq|upsetneq)|t(?:imes|op)|v(?:Dash|ee)|wedge)` "Math Macros" A
\\``rv = (m[1] ? "not\\" : "") + m[2]``
endsnippet

context math(context)
snippet `(?<![a-zA-Z])((?:arc)?(?:cos|cot|csc|sec|sin|tan)|bigcap|bigcup|exp|inf|int|iint|iiint|gcd|lim|ln|log|max|min|oint|pmod|prod|sum|sup)(_(?:{.*}|[^{\s]|\\[a-zA-Z]+)(?:\^(?:{.*}|[^{\s]|\\[a-zA-Z]+))?|\^(?:{.*}|[^{\s]|\\[a-zA-Z]+)(?:_(?:{.*}|[^{\s]|\\[a-zA-Z]+))?)?  ` "Function Auto-Brackets" A
``rv = m[1] + (m[2] ? m[2] : "")``\\left${1:(} $2 \\right${0:)}
endsnippet

context math(context)
snippet `(m(?:bb|bf|bm|cal|frk|rm|scr)|\^(?:[_^>~]|[234]?\.)|text)` "Math Types" A
\\``rv = getReplacement(textTypeArray, m[1])``{$1}
endsnippet

snippet `\\(bold|chapter|emphasis|italic|section|textbf|textit|underline|strike)` "Non-math Types" A
\\``rv = getReplacement(textTypeArray, m[1])``{$1}
endsnippet

context math(context)
snippet `(not)?(-[-+>]|:[:=]|!(?:[<>=]|<=|>=|\|-|\|\|)|\.\.\.|@>|\+-|<(?:->|-->|<|=|=>|==>)|=[:<=>]|>[=>]|\|[-=>|\\]|~[-=>~]|ems|o[+*])` "Symbols" A
\\``rv = (m[1] ? "not\\" : "") + getReplacement(symbolNameArray, m[2])``
endsnippet

context math(context)
snippet `(lr[apcbv]|[cC]eil|[fF]loor|[aA]bs|[nN]orm|<>)` "Dynamic Limiters" A
``rv = `${getReplacement(limitSymbolsArray, (m[1] + "l"))} ${snip.tabstop(1)} ${getReplacement(limitSymbolsArray, (m[1] + "r"))}```
endsnippet

priority 2
context math(context)
snippet `([_^])(['*]|(\\T))` "Quick Symbols" A
``rv = `${m[1]}{ \\${getReplacement(symbolNameArray, m[2])}```$1 }
endsnippet

context math(context)
snippet `\\([_^])` "Manual Sup/Subscript" A
``rv = m[1]``{ $1 }
endsnippet

priority 2
context math(context)
snippet `(?<=(?:[a-zA-Z\d)}|\]]([_^])))([a-zA-Z\d+-])\1([a-zA-Z\d\\+-]|(\(.*\)))` "Auto Sup/Subscript (Nested, No Brackets)" A
``
const operator = m[1],
	base = m[2],
	contents = m[3],
	brackets = m[4];
	rv = brackets ? `{${base}${operator}{${contents}${snip.tabstop(1)}}${snip.tabstop(2)}}` : `{${base}${operator}${contents}${snip.tabstop(1)}}`;
``
endsnippet

priority 2
context math(context)
snippet `(?<=(?:[a-zA-Z\d)}|\]]([_^])))({[a-zA-Z\d\\+={}^_-]+})\1([a-zA-Z\d\\+-]|(\(.*\)))` "Auto Sup/Subscript (Nested, Brackets)" A
``
const operator = m[1],
	base = m[2],
	contents = m[3],
	brackets = m[4];
let	bracketnum = 0,
	index = 0;
	for (let char of base) {
		index++;
		if (char == '{') bracketnum++;
		else if (char == '}') bracketnum--;
		if (index == base.length) break;
		if (bracketnum <= 0) 
			rv = brackets ? `${base}${operator}{${contents}${snip.tabstop(1)}}` : `${base}${operator}${contents}`;
	}
	rv = `{${base}${operator}{${contents}${snip.tabstop(1)}}${snip.tabstop(2)}}`;
``
endsnippet

priority 2
context math(context)
snippet `(?<=[a-zA-Z\d)}|\]])([_^])([\\+-][a-zA-Z\d]+(?:  )?|[a-zA-Z\d](?:[a-zA-Z=\d+-]|,?  )|(\(.*\)))` "Auto Sup/Subscript (Base)" A
``
const operator = m[1],
	trimmedcontent = m[2].replaceAll("  ", " "),
	contents = (trimmedcontent == "mu" || trimmedcontent == "nu" || trimmedcontent.toLowerCase() == "pi" || trimmedcontent.toLowerCase() == "xi") ? "\\" + m[2].replaceAll("  ", " ") : m[2].replaceAll("  ", " "),
	plussubs = contents.search(/[=+-]/g),
	plusmins = plussubs != -1 && plussubs != 0,
	brackets = m[3],
	inner = brackets ? contents : (plusmins ? `${contents.substring(0, plussubs)} ${contents.substring(plussubs)} ` : contents);
	rv = `${operator}{${inner}${snip.tabstop(1)}}`;
``
endsnippet

context math(context)
snippet `\\piecewise([2-9])` "Piecewise Functions" A
\\begin{dcases}
``
let order = 1, 
	r = "";
	for (let i = 0; i < m[1] - 1; i++)
		r += `	${snip.tabstop(order++)}, &\\text{ if } ${snip.tabstop(order++)} \\ ; \\\\\\\n`;
	r += `	${snip.tabstop(order++)}, &\\text{ if } ${snip.tabstop(order++)} \\ .`;
	rv = r;
``
\\end{dcases}
endsnippet

context math(context)
snippet `(\d)?(?:sqrt)` "Roots" A
``rv = `\\sqrt${!m[1] ? "" : `[${m[1]}]`}{${snip.tabstop(1)}}```
endsnippet

context math(context)
snippet `(\d)?(p)?dif` "Differentials" A
``
const name = m[2] ? "partial" : "mathrm{d}";
rv = `\\frac{\\${name}${(m[1] ? `^{${m[1]}} ` : " ")}${snip.tabstop(1)}}{\\${name} ${snip.tabstop(2, "x")}${(m[1] ? `^{${m[1]}}}` : "}")}`
``
endsnippet

context math(context)
snippet dint "Definite Integral" A
\int_{${1:-\infty}}^{${2:\infty}} ${3} \, \mathrm{d}${4:x}
endsnippet

context math(context)
snippet iint "Indefinite Integral" A
\int ${1} \, \mathrm{d}${2:x}
endsnippet

context math(context)
snippet `\\systeme([1-9])` "System of Equations" A
\systeme$1{
``
let order = 2,
	r = "";
	for (let i = 0; i < m[1] - 1; i++)
		r += snip.tabstop(order++) + ",\n";
	r += snip.tabstop(order++) + "\n";
	rv = r;
``}
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])([Ss]um|[Pp]rod|lim|Cup|Cap)` "Sums, Limits, Products" A
``
const upper = m[1] === capitaliseWord(m[1]),
	name = getReplacement(limitSymbolsArray, m[1].toLowerCase()),
	one = getReplacement(limitSymbolsArray, m[1] + "1"), 
	two = getReplacement(limitSymbolsArray, m[1] + "2");
let	order = 1,
	r =  `\\${name}\\limits_{${snip.tabstop(order++, one)}${two}`,
	three = m[1] == "lim" || upper ? snip.tabstop(order++, getReplacement(limitSymbolsArray, m[1] + "3")) : "",
	four = upper ? `^{${snip.tabstop(order++, "\\infty")}}` : "";
	r += `${three}}${four} `;
	rv = r;
``
endsnippet

priority 1
context math(context)
snippet `(//|__|\^\\\^|bin|choose|color|colour)` "Two Argument Expansions" A
\``rv = getReplacement(argumentFunctionArray, m[1])``{$1}{$2}
endsnippet

context math(context)
snippet `(eval)` "Three Argument Expansions" A
\``rv = getReplacement(argumentFunctionArray, m[1])``{$1}{$2}{$3}
endsnippet

context math(context)
snippet `(?<![\\a-zA-Z])op([rnl])` "Create an Operator" A
``
let order = 1,
	r = `\\mathop{\\mathrm{${snip.tabstop(order++)}}}`,
	lim = m[1] == "n" ? "\\nolimits" + snip.tabstop(order++) : m[1] == "l" ? snip.tabstop(order++) : "";
	r += `${lim} ${snip.tabstop(order)}`;
	rv = r;
``
endsnippet

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction, no ()" A
\frac{``rv = m[1]``}{$1}
endsnippet

context math(context)
snippet `^.*\)/` "Fraction, with ()" A
``
const str = m[0].slice(0, -1).replaceAll("\\\}", "\\\\\}").replaceAll("\}", "\\\}").replaceAll(/(?<=\s)\\\\(?=\s)/g, "\\\\\\\\");
let	depth = 0,
	i = str.length - 1;
	while (true) {
		if (str[i] == ')') depth += 1;
		if (str[i] == '(') depth -= 1;
		if (depth == 0) break;
		i -= 1;
	}
	rv = `${str.slice(0, i)}\\frac{${snip.tabstop(1, str.slice(i + 1, -1))}}`;
``{$2}
endsnippet

context math(context)
snippet `array([1-9]) ([1-9])` "Array environment" A
\begin{array}{``
	const len = m[3];
	let	order = 1,
		format = "";
		for(let i = 0; i < len; i++)
			format += "c";
		rv = snip.tabstop(order++, format);
	``}
	``
	const nrow = m[1],
		ncol = m[2];
	let	r = "";
		for (let i = 0; i < nrow - 1; i++) {
			for(let j = 0; j < ncol - 1; j++)
				r += `${snip.tabstop(order++)} & `;
			r += ` ${snip.tabstop(order++)} \\\\\\\n	`;
		}
		for(let j = 0; j < ncol - 1; j++)
			r += `${snip.tabstop(order++)} & `;
		r += ` ${snip.tabstop(order)} \\\\\\`;
		rv = r;
	``
\end{array}
endsnippet

context math(context)
snippet `([bp])mat([1-9]) ([1-9])` "Matrices" A
\begin{``rv = m[1]``matrix}[``
	const len = m[3];
	let	order = 1,
		format = "";
		for(let i = 0; i < len; i++)
			format += "c";
		rv = snip.tabstop(order++, format);
	``]
	``
	const nrow = m[2],
		ncol = m[3];
	let	r = "";
		for (let i = 0; i < nrow - 1; i++) {
			for(let j = 0; j < ncol - 1; j++)
				r += `${snip.tabstop(order++)} & `;
			r += `${snip.tabstop(order++)} \\\\\\\n	`;
		}
		for (let j = 0; j < ncol - 1; j++)
			r += `${snip.tabstop(order++)} & `;
		r += `${snip.tabstop(order++)} \\\\\\`;
		rv = r;
	``
\end{``rv = m[1]``matrix}
endsnippet

snippet `(m)?table([1-9]{1})\ ([1-9]{1})` "Tables" A
\begin{table}[H]
	\centering
	\begin{tabular}{``
	const len = m[3],
		math = m[1];
	let	format = "c";
		for(let i = 0; i < len - 1; i++)
			format += "c"
		rv = snip.tabstop(3, format);
	``}
	    \toprule
		``
		const nrow = m[2],
			ncol = m[3];
		let order = 4,
			r = "";
			for (let i = 0; i < nrow - 1; i++) {
				for(let j = 0; j < ncol - 1; j++) 
					r += (math ? "\\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " & ";
				r += (math ? " \\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " \\\\\\\n	";
				if (!i) r += "	\\midrule\n	";
				r += `	`;
			}	
			for(let j = 0; j < ncol - 1; j++)
				r += (math ? "\\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " & ";
			r += (math ? "\\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " \\\\\\";
			rv = r;
		``
    	\bottomrule
	\end{tabular}
	\caption{${2:caption}}
	\label{Table \thetable}
\end{table}
endsnippet

