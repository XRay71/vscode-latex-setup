global

let dollarSignFlag = false,
	mathFlag = false,
	listFlag = false;

function math(context) {
	let i = context.scopes.length - 1,
		mathFunctionLastIndex = -1,
		normalFunctionlastIndex = -1;

	for (; i > -1; i--) {
		if (mathFunctionLastIndex < 0 && context.scopes[i].startsWith("meta.math"))
			mathFunctionLastIndex = i;	

		if (normalFunctionlastIndex < 0 && (context.scopes[i].startsWith("comment") || context.scopes[i].startsWith("meta.text.normal.tex")))
			normalFunctionlastIndex = i;	

		if (mathFunctionLastIndex > -1 && normalFunctionlastIndex > -1)
			break;
	}

	//  const mathFunctionLastIndex = context.scopes.findLastIndex(s => s.startsWith("meta.math")),
	// 	normalFunctionlastIndex = context.scopes.findLastIndex(s => s.startsWith("comment") || s.startsWith("meta.text.normal.tex"));

	mathFlag = mathFunctionLastIndex > normalFunctionlastIndex;

	if (mathFlag)
		dollarSignFlag = false;

	return mathFlag;
}

function list(context) {
	listFlag = context.scopes.findLastIndex(s => s.startsWith("meta.function.environment.list")) > -1;
	return listFlag;
}

function dollarSign(context) {
	let i = context.scopes.length - 1,
		numMathFunctions = 0,
		mathFunctionLastIndex = -1,
		metaFunctionLastIndex = -1;
	const metaFunctionFirstIndex = context.scopes.findIndex(s => s.startsWith("meta.function"));

	for (; i > -1; i--) {
		if (context.scopes[i].startsWith("meta.math")) {
			numMathFunctions++;
			if (mathFunctionLastIndex < 0)
				mathFunctionLastIndex = i;
		}
		if (metaFunctionLastIndex < 0 && context.scopes[i].startsWith("meta.function"))
			metaFunctionLastIndex = i;
	}

	//	let numMathFunctions = 0;
	//	context.scopes.forEach(v => v.startsWith("meta.math") && numMathFunctions++);

	//	const mathFunctionLastIndex = context.scopes.findLastIndex(s => s.startsWith("meta.math")),
	//		metaFunctionLastIndex = context.scopes.findLastIndex(s => s.startsWith("meta.function")),
	//		metaFunctionFirstIndex = context.scopes.findIndex(s => s.startsWith("meta.function"));

	dollarSignFlag = numMathFunctions < 2 && (mathFunctionLastIndex < 4 || (metaFunctionLastIndex > 2 && mathFunctionLastIndex - metaFunctionFirstIndex > 1));
	mathFlag = true;

	return dollarSignFlag; 
}

function capitalise(word) {
	return word.charAt(0).toUpperCase() + word.substring(1);
}

function getElse(list, key) {
	if (list.has(key)) return list.get(key);
	else return key
}

function formatStr(str) {
	return str.replaceAll("\\\}", "\\\\\}").replaceAll("\}", "\\\}").replaceAll(/(?<=\s|^)\\\\(?=\s|$)/g, "\\\\\\\\");
}

const hyperref = new Map([
	["hyref", "hyperref"]
	]
);

const listEnvironments = [
	new Map([
		["alist", "enumerate"],
		["blist", "itemize"],
		["dlist", "itemize"],
		["elist", "enumerate"],
		["ilist", "enumerate"],
		["list", "enumerate"],
		["nlist", "enumerate"],
	]), // 0: environment names
	new Map([
		["alist", "[label=(\\alph*)]"],
		["blist", ""],
		["dlist", "[label=--]"],
		["elist", "[label=]"],
		["ilist", "[label=(\\textit{\\roman*})]"],
		["list", ""],
		["nlist", "[label=(\\arabic*)]"],
	]) // 1: environment labels
]; 

const phrases = new Map([
	["lhs", "left hand side"],
	["rhs", "right hand side"],
	["s.t.", "such that"],
	["wrt", "with regard to"],
	]
);

const textTypes = new Map([
	["^_", "overline"],
	["^-", "overbar"],
	["^.", "dot"],
	["^^", "hat"],
	["^>", "vec"],
	["^~", "widetilde"],
	["^2.", "ddot"],
	["^3.", "dddot"],
	["^4.", "ddddot"],
	["bold", "textbf"],
	["code", "code"],
	["emphasis", "emph"],
	["italic", "textit"],
	["mbb", "mathbb"],
	["mbf", "mathbf"],
	["mbm", "bm"],
	["mcal", "mathcal"],
	["mfrk", "mathfrak"],
	["mrm", "mathrm"],
	["mscr", "mathscr"],
	["strike", "sout"],
	]
);

const symbols = new Map([
	["--", "setminus"],
	["-+", "mp"],
	["-<", "leftarrow"],
	["->", "to"],
	["::", "colon"],
	[":=", "coloneqq"],
	["!<", "nless"],
	["!=", "neq"],
	["!>", "ngtr"],
	["!|-", "nvdash"],
	["!||", "nmid"],
	["!~", "nsim"],
	["...", "dots"],
	["@<", "hookleftarrow"],
	["@>", "hookrightarrow"],
	["+-", "pm"],
	["<->", "leftrightarrow"],
	["<!=", "nleq"],
	["<<", "ll"],
	["<=", "leq"],
	["<=>", "Leftrightarrow"],
	["=:", "eqqcolon"],
	["=<", "impliedby"],
	["==", "equiv"],
	["=>", "implies"],
	[">!=", "ngeq"],
	[">=", "geq"],
	[">>", "gg"],
	["|-", "vdash"],
	["|\\", "parallel"],
	["|=", "models"],
	["|>", "mapsto"],
	["||", "mid"],
	["~-", "simeq"],
	["~=", "cong"],
	["~>", "leadsto"],
	["~~", "approx"],
	["ems", "varnothing"],
	["o*", "otimes"],
	["o+", "oplus"],
	["'", "prime"],
	["*", "ast"],
	["\\\\", "\\\\\n"],
	["\\T", "intercal"],
	]
);

const dynamicLimiters = new Map([
	["<>l", "\\langle"],
	["<>r", "\\rangle"],
	["Absl", "\\left\\vert"],
	["absl", "\\vert"],
	["Absr", "\\right\\vert"],
	["absr", "\\vert"],
	["ceill", "\\lceil"],
	["Ceill", "\\left\\lceil"],
	["ceilr", "\\rceil"],
	["Ceilr", "\\right\\rceil"],
	["Floorl", "\\left\\lfloor"],
	["floorl", "\\lfloor"],
	["floorr", "\\rfloor"],
	["Floorr", "\\right\\rfloor"],
	["lral", "\\left\\langle"],
	["lrar", "\\right\\rangle"],
	["lrbl", "\\left["],
	["lrbr", "\\right]"],
	["lrcl", "\\left\\{"],
	["lrcr", "\\right\\\\}"],
	["lrpl", "\\left("],
	["lrpr", "\\right)"],
	["lrvl", "\\left|"],
	["lrvr", "\\right|"],
	["Norml", "\\left\\lVert"],
	["norml", "\\lVert"],
	["Normr", "\\right\\rVert"],
	["normr", "\\rVert"],

	]
);

const environments = [
	new Set([
		"align\*",
		"answer",
		"claim",
		"conjecture",
		"explanation",
		"goal",
		"idea",
		"intuition",
		"investigation",
		"mcorollary",
		"mdefinition",
		"malgorithm",
		"mexample",
		"mexercise",
		"mexplanation",
		"mlemma",
		"mproof",
		"mproperty",
		"mproposition",
		"mtheorem",
		"ncorollary",
		"ndefinition",
		"malgorithm",
		"nexample",
		"nexercise",
		"nexplanation",
		"nlemma",
		"notation",
		"note",
		"notice",
		"nproof",
		"nproperty",
		"nproposition",
		"ntheorem",
		"observation",
		"problem",
		"question",
		"recall",
		"remark",
		"solution",
	]), // 0: "simple" environments
	new Set([
		"align\*",
		"answer",
		"claim",
		"conjecture",
		"explanation",
		"intuition",
		"notation",
		"note",
		"notice",
		"observation",
		"problem",
		"question",
		"recall",
		"remark",
		"solution",
	]), // 1: "unnumbered" environments
	new Map([
		["ncorollary", "corollary"],
		["ndefinition", "definition"],
		["nalgorithm", "algorithm"],
		["nexample", "example"],
		["nexercise", "exercise"],
		["nexplanation", "explanation"],
		["nlemma", "lemma"],
		["nproof", "proof"],
		["nproperty", "property"],
		["nproposition", "proposition"],
		["ntheorem", "theorem"],
		["mcorollary", "corollary"],
		["mdefinition", "definition"],
		["malgorithm", "algorithm"],
		["mexample", "example"],
		["mexercise", "exercise"],
		["mexplanation", "explanation"],
		["mlemma", "lemma"],
		["mproof", "proof"],
		["mproperty", "property"],
		["mproposition", "proposition"],
		["mtheorem", "theorem"],
	]) // 2: translations of settings. 
];

const limprods = new Map([
	["cap", "bigcap"],
	["cup", "bigcup"],
	["o*", "bigotimes"],
	["o+", "bigoplus"],
	["vee", "bigvee"],
	["wedge", "bigwedge"],	
	["Cap1", "i"],
	["Cap2", " = "],
	["Cap3", "1"],
	["Cup1", "i"],
	["Cup2", " = "],
	["Cup3", "1"],
	["lim1", "n"],
	["lim2", " \\to "],
	["lim3", "\\infty"],
	["O*1", "i"],
	["O*2", " = "],
	["O*3", "1"],
	["O+1", "i"],
	["O+2", " = "],
	["O+3", "1"],
	["prod1", "i"],
	["Prod1", "i"],
	["Prod2", " = "],
	["prod2", ""],
	["Prod3", "1"],
	["sum1", "i"],
	["Sum1", "i"],
	["Sum2", " = "],
	["sum2", ""],
	["Sum3", "1"],
	["Vee1", "i"],
	["Vee2", " = "],
	["Vee3", "1"],
	["Wedge1", "i"],
	["Wedge2", " = "],
	["Wedge3", "1"],
	]
);

const argumentFunctions = new Map([
	["__", "underset"],
	["//", "frac"],
	["^\\^", "overset"],
	["bin", "binom"],
	["choose", "binom"],
	["color", "textcolor"],
	["colour", "textcolor"],
	["text", "text"],
	["\\topstr", "texorpdfstring"],
	["text", "text"],
	]
);

endglobal

# 8: dollar sign
# 7: single character commands
# 6: priority math symbols
# 5: other math symbols
# 4: automatic expansions
# 3: commands without arguments
# 2: commands with arguments
# 1: environments

context dollarSign(context) || math(context)
snippet `(?<!\\)\$$` "Inline Math" A
``rv = dollarSignFlag ? 
`\\( ${snip.tabstop(1)} \\)` : 
`\\$`
``
endsnippet

context !math(context)
snippet dm "Display Math" A
\\[
	$0
\\]
endsnippet

context mathFlag
snippet `(\d+|\d*(?:\\)?[A-Za-z]+(?:[_^](?:\{\d+\}|\d))*)\/` "Fraction, no ()" A
\frac{``rv = m[1]``}{$1}
endsnippet

snippet \\ "New Line" iA
\\\\

endsnippet

snippet {} "Explicit Curly Brackets" iA
\\{ $1 \\}
endsnippet

# context mathFlag
# snippet `\b(?<!\\)(?:alpha|beta|chi|[dD]elta|epsilon|z?eta|[gG]amma|iota|kappa|[lL]ambda|[mn]u|[oO]mega|[pP][hs]?i|rho|[sS]igma|tau|[tT]heta|[uU]psilon|var(?:epsilon|kappa|phi|pi|rho|sigma|theta)|[xX]i)` "Greek Characters" A
# \\``rv = m[0]``
# endsnippet

# context mathFlag
# snippet `\b(?<!\\)(?:aleph|ast|circ|n?cong|cross|[cdv]?dots?|ell|emptyset|n?exists|n?geq|infty|o?ii?i?nt|[lr]angle|n?leq|left|n?mid|neq|nabla|n?parallel|partial|prime|qed|right|setminus|n?sim(?:eq)?|square|star|n?su[bp]set(?:n?eq)?|times|triangle|varnothing|n?v[dD]ash|vert)` "Math Characters" A
# \\``rv = m[0]``
# endsnippet

# context mathFlag
# snippet `\b(?<!\\)(?:(?:arc)?(?:cos|cot|csc|sec|sin|tan)|exp|inf|gcd|ln|log|max|min|pmod|sup)` "Math Functions" A
# \\``rv = m[0]``
# endsnippet

context mathFlag
snippet `\b(?<!\\)(?:(?:arc)?(?:cos|cot|csc|sec|sin|tan)|aleph|alpha|ast|beta|chi|[cdv]?dots?|bigcdot|circ|cross|[dD]elta|ell|emptyset|epsilon|exp|[gG]amma|gcd|inf|infty|iota|kappa|[lL]ambda|[lr]angle|left|ln|log|[mn]u|max|min|n?cong|n?exists|n?geq|n?leq|n?mid|n?parallel|n?sim(?:eq)?|n?su[bp]set(?:n?eq)?|n?v[dD]ash|nabla|neq|o?ii?i?nt|[oO]mega|[pP][hs]?i|partial|pmod|prime|qed|rho|right|[sS]igma|setminus|square|star|sup|[tT]heta|tau|times|triangle|[uU]psilon|var(?:epsilon|kappa|phi|pi|rho|sigma|theta)|varnothing|vert|[xX]i|z?eta)` "Math Characters" A
\\``rv = m[0]``
endsnippet

context mathFlag
snippet `m(?:b[bfm]|cal|frk|rm|scr)|\^(?:[_^>~-]|[234]?\.)|text` "Math Types" A
\\``rv = getElse(textTypes, m[0])``{$1}
endsnippet

context mathFlag
snippet `^.*\)/$` "Fraction, with ()" A
``
const str = formatStr(m[0].slice(0, -1));
let	depth = 0,
	i = str.length - 1;
	while (true) {
		if (str[i] == ')') depth += 1;
		if (str[i] == '(') depth -= 1;
		if (depth == 0) break;
		i -= 1;
	}
	rv = `${str.slice(0, i)}\\frac{${snip.tabstop(1, str.slice(i + 1, -1))}}`;
``{$2}
endsnippet

context mathFlag
snippet `\b(?<!\\)(not)?((?:big)?(?:(?:sq)?cap|(?:sq)?cup|oplus|otimes|wedge|vee)|approx|because|colon(?:eqq)?|equiv|eqqcolon|iff|implie(?:s|dby)|in(?:tersect)?|forall|land|lnot|lor|mapsto|models|perp|propto|therefore|top|union)` "Math Characters (explicit not)" A
\\``rv = (m[1] ? "not\\" : "") + m[2]``
endsnippet

context mathFlag
snippet `(?:--|-\+|\+-|::|[<>]!=|[<>]=|![<=>~]|[.]{3}|!?[|]-|!?[|]{2}|ems)` "Symbols" A
\\``rv = getElse(symbols, m[0])``
endsnippet

context mathFlag
snippet `(not)?(-[<>]|:=|=:|@[<>]|<[-=]>|<<|>>|=[<>=]|[|][=>]|[|]\\|~[-=>~]|o[+*])` "Symbols (explicit not)" A
\\``rv = (m[1] ? "not\\" : "") + getElse(symbols, m[2])``
endsnippet

context mathFlag
snippet `(?<=\b(?:(?:arc)?(?:cos|cot|csc|sec|sin|tan)|(?:big)?(?:(?:sq)?cap|(?:sq)?cup|oplus|otimes|wedge|vee)|exp|inf|o?ii?i?nt|gcd|lim|ln|log|max|min|pmod|prod|sum|sup)(?:_(?:[\w\\]|\\[a-zA-Z]+|{.*}))?(?:\^(?:[\w\\]|\\[a-zA-Z]+|{.*}))?)  ` "Function Auto-Brackets" A
\\left${1:(} $2 \\right${0:)}
endsnippet

context mathFlag
snippet `(?:lr[apcbv]|[aA]bs|[cC]eil|[fF]loor|[nN]orm|<>)` "Dynamic Limiters" A
``rv = `${getElse(dynamicLimiters, `${m[0]}l`)} ${snip.tabstop(1)} ${getElse(dynamicLimiters, `${m[0]}r`)}```
endsnippet

snippet `(?<=\\)(?:bold|chapter|code|emph|italic|section|strike|under(?:line)?)` "Non-math Types" A
``rv = getElse(textTypes, m[0])``{$1}
endsnippet

context mathFlag
snippet `(?<=[_^])(?:['*]|\\T)` "Quick Symbols" A
``rv = `{ \\${getElse(symbols, m[0])}```$1 }
endsnippet

context mathFlag
snippet `(?<=(?:[a-zA-Z\d)}|\]]([_^])))([a-zA-Z\d+-])\1([a-zA-Z\d\\+-]|(-?\(.*\)))` "Auto Sup/Subscript (Nested, No Brackets)" A
``
const operator = m[1],
	base = m[2],
	contents = m[3],
	brackets = m[4];
	rv = brackets ? `{${base}${operator}{${contents}${snip.tabstop(1)}}${snip.tabstop(2)}}` : `{${base}${operator}${contents}${snip.tabstop(1)}}`;
``
endsnippet

context mathFlag
snippet `(?<=(?:[a-zA-Z\d)}|\]]([_^])))({[a-zA-Z\d\\+={}^_-]+})\1([a-zA-Z\d\\+-]|(-?\(.*\)))` "Auto Sup/Subscript (Nested, Brackets)" A
``
const operator = m[1],
	base = m[2],
	contents = m[3],
	brackets = m[4];
let	bracketnum = 0,
	index = 0;
	for (let char of base) {
		index++;
		if (char == '{') bracketnum++;
		else if (char == '}') bracketnum--;
		if (index == base.length) break;
		if (bracketnum <= 0) 
			rv = brackets ? `${base}${operator}{${contents}${snip.tabstop(1)}}` : `${base}${operator}${contents}`;
	}
	rv = `{${base}${operator}{${contents}${snip.tabstop(1)}}${snip.tabstop(2)}}`;
``
endsnippet

context mathFlag
snippet `(?<=[a-zA-Z\d)}|\]])([_^])([\\+-][a-zA-Z\d]+(?:  )?|[a-zA-Z\d](?:[a-zA-Z=\d+-]|,?  )|(-?\(.*\)))` "Auto Sup/Subscript (Base)" A
``
const operator = m[1],
	trimmedcontent = m[2].replaceAll("  ", " "),
	contents = (trimmedcontent == "mu" || trimmedcontent == "nu" || trimmedcontent.toLowerCase() == "pi" || trimmedcontent.toLowerCase() == "xi") ? "\\" + m[2].replaceAll("  ", " ") : m[2].replaceAll("  ", " "),
	plussubs = contents.search(/[=+-]/g),
	plusmins = plussubs != -1 && plussubs != 0,
	brackets = m[3],
	inner = brackets ? contents : (plusmins ? `${contents.substring(0, plussubs)} ${contents.substring(plussubs)} ` : contents);
	rv = `${operator}{${inner}${snip.tabstop(1)}}`;
``
endsnippet

context mathFlag
snippet `(?<![\\a-zA-Z])(?://|__|\^\\\^|bin|choose|colou?r|correction)$` "Two Argument Expansions" A
\``rv = getElse(argumentFunctions, m[0])``{$1}{$2}
endsnippet

context mathFlag
snippet `(?:(?<=[\(\[\s])([^\s\(\[]+))\d(\w)?\.{2}` "List of Terms" iA
``
const term = m[1] ? formatStr(m[1]) : "";
let order = 1;
	for (let i = 1; i <= m[0].charAt(m[0].length - (m[2] ? 4 : 3)); i++)
		rv += `${snip.tabstop(order++, (term ? `${term}_${i}` : ""))}, `;
	rv += `\\dots, ${snip.tabstop(order, (term ? `${term}_${m[2] ? m[2] : "k"}` : ""))}`;
``
endsnippet

snippet `\b(?:wrt|s\.t\.|lhs|rhs)` "Phrases" A
``rv = mathFlag ? `\\text{ ${getElse(phrases, m[0])} }` : getElse(phrases, m[0])``
endsnippet

context mathFlag
snippet `\\[_^]` "Manual Sup/Subscript" A
``rv = m[0].charAt(1)``{ $1 }
endsnippet

context mathFlag
snippet `(\d)?(p)?dif` "Differentials" A
``
const name = m[2] ? "partial" : "mathrm{d}";
rv = `\\frac{\\${name}${(m[1] ? `^{${m[1]}} ` : " ")}${snip.tabstop(1)}}{\\${name} ${snip.tabstop(2, "x")}${(m[1] ? `^{${m[1]}}}` : "}")}`
``
endsnippet

context !mathFlag
snippet `\bhy?ref` "Create References" A
``rv = `\\${getElse(hyperref, m[0])}${m[0].charAt(1) == 'y' ? `[${snip.tabstop(1)}]` : `{${snip.tabstop(1)}}`}```{${2:$1}}
endsnippet

context mathFlag
snippet `\b(\d)?sqrt` "Roots" A
``rv = `\\sqrt${!m[1] ? "" : `[${m[1]}]`}{${snip.tabstop(1)}}```
endsnippet

context mathFlag
snippet `(d+)(i+)nt$` "Definite Integral" A
\``rv = m[2]``nt_{${1:-\infty}}^{${2:\infty}} ${3}``
for (let i = 4; i < m[1].length + 3; i++)
	rv += formatStr(` \\, \\mathrm{d}${snip.tabstop(i, "x")}`);
rv += formatStr(` \\, \\mathrm{d}${snip.tabstop(0, "x")}`);
``
endsnippet

context mathFlag
snippet `(I+)(i+)nt$` "Indefinite Integral" A
\``rv = m[2]``nt ${1}``
for (let i = 2; i < m[1].length + 1; i++)
	rv += formatStr(` \\, \\mathrm{d}${snip.tabstop(i, "x")}`);
rv += formatStr(` \\, \\mathrm{d}${snip.tabstop(0, "x")}`);
``
endsnippet

context mathFlag
snippet `(?<![\\a-zA-Z])(?:[Ss]um|[Pp]rod|lim|Cup|Cap|Vee|Wedge|O[+*])` "Sums, Limits, Products" A
``
const upper = capitalise(m[0]) === m[0],
	name = getElse(limprods, m[0].toLowerCase());

let order = 1;

const one = getElse(limprods, m[0] + "1"), 
	two = getElse(limprods, m[0] + "2");

let r = `\\${name}\\limits_{${snip.tabstop(order++, one)}${two}`;

const three = m[0] == "lim" || upper ? snip.tabstop(order++, getElse(limprods, m[0] + "3")) : "",
	four = upper ? `^{${snip.tabstop(order + 3, "\\infty")}}` : `^{${snip.tabstop(order++, "")}}`;

r += `${three}}${four} `;
rv = r;
``
endsnippet

context !mathFlag
snippet `\\(?:correction|n?lecture|topstr)$` "Two Argument Expansions (Non-math)" A
\``rv = getElse(argumentFunctions, m[0])``{$1}{$2}
endsnippet

context mathFlag
snippet `eval` "Three Argument Expansions" A
\``rv = getElse(argumentFunctions, m[0])``{$1}{$2}{$3}
endsnippet

context mathFlag
snippet `(?<![\\a-zA-Z])op([rnl])$` "Create an Operator" A
``
let order = 1;
	rv = `\\mathop{\\mathrm{${snip.tabstop(order++)}}}`,
	lim = m[1] == "n" ? "\\nolimits" + snip.tabstop(order++) : m[1] == "l" ? snip.tabstop(order++) : "";
	rv += `${lim} ${snip.tabstop(0)}`;
``
endsnippet

snippet \beg "Create Enviroment" iA
\\begin{${1:example}}$2
	$0
\\end{${1:example}}
endsnippet

context !mathFlag
snippet fig "Figure Environment" bA
\\begin{figure}[${1:H}]
	\\centering
	\\includegraphics[width=0.8\textwidth]{${2:./Figures/}}
	\\caption{$3}
	\\label{Figure $0}
\\end{figure}
endsnippet

context !mathFlag
snippet \cblock "Code Environment" iA
\\begin{lstlisting}[language=${1:C++}]
	$0
\\end{lstlisting}
endsnippet

context !mathFlag
snippet `\b\dcolumn` "Multicol Environment" A
\\begin{multicols}{``rv = m[0].charAt(0)``}
[\\texorpdfstring{
	$1
}{}\vspace{-15px}]
``
let order = 2;
	for (let i = 1; i < m[0].charAt(0); i++)
		rv += `\t${snip.tabstop(order++)}\n\\vfill\\columnbreak\n`;
	rv += `\t${snip.tabstop(order++)}\n\\columnbreak`;
``
\end{multicols}\vspace{-15px}
endsnippet

context !mathFlag
snippet `\\[abdein]?list\d` "List Environments" A
``
const name = getElse(listEnvironments[0], m[0].slice(1, -1)),
	label = getElse(listEnvironments[1], m[0].slice(1, -1));
let	order = 1;
	rv = `\\begin{${name}}${label}\n`;
	for (let i = 0; i < m[0].slice(-1); i++)
		rv += `\t\\item ${snip.tabstop(order++)}\n`;
	rv += `\\end{${name}}`;
``
endsnippet

context mathFlag
snippet `\\piecewise[2-9]` "Piecewise Functions" A
\\begin{dcases}
``
let order = 1;
	for (let i = 0; i < m[0].slice(-1) - 1; i++)
		rv += `\t${snip.tabstop(order++)}, &\\text{ if } ${snip.tabstop(order++)} \\ ; \\\\\\\n`;
	rv += `\t${snip.tabstop(order++)}, &\\text{ if } ${snip.tabstop(order++)} \\ .`;
``
\\end{dcases}
endsnippet

context mathFlag
snippet `\\systeme([1-9])$` "System of Equations" A
\systeme$1{
``
let order = 2;
	for (let i = 0; i < m[1] - 1; i++)
		rv += snip.tabstop(order++) + ",\n";
	rv += snip.tabstop(order++) + "\n";
``}
endsnippet

context mathFlag
snippet `array([1-9]) ([1-9])` "Array environment" A
\begin{array}{``
	const len = m[3];
	let	order = 1,
		format = "";
		for(let i = 0; i < len; i++)
			format += "c";
		rv = snip.tabstop(order++, format);
	``}
	``
	const nrow = m[1],
		ncol = m[2];
	let	r = "";
		for (let i = 0; i < nrow - 1; i++) {
			for(let j = 0; j < ncol - 1; j++)
				r += `${snip.tabstop(order++)} & `;
			r += `\t${snip.tabstop(order++)} \\\\\\\n	`;
		}
		for(let j = 0; j < ncol - 1; j++)
			r += `${snip.tabstop(order++)} & `;
		r += `\t${snip.tabstop(order)} \\\\\\`;
		rv = r;
	``
\end{array}
endsnippet

context mathFlag
snippet `([bp])mat([1-9]) ([1-9])` "Matrices" A
\begin{``rv = m[1]``matrix}[``
	const len = m[3];
	let	order = 1,
		format = "";
		for(let i = 0; i < len; i++)
			format += "c";
		rv = snip.tabstop(order++, format);
	``]
	``
	const nrow = m[2],
		ncol = m[3];
	let	r = "";
		for (let i = 0; i < nrow - 1; i++) {
			for(let j = 0; j < ncol - 1; j++)
				r += `${snip.tabstop(order++)} & `;
			r += `${snip.tabstop(order++)} \\\\\\\n	`;
		}
		for (let j = 0; j < ncol - 1; j++)
			r += `${snip.tabstop(order++)} & `;
		r += `${snip.tabstop(order++)} \\\\\\`;
		rv = r;
	``
\end{``rv = m[1]``matrix}
endsnippet

context !mathFlag
snippet `(m)?table([1-9]{1})\ ([1-9]{1})` "Tables" A
\begin{table}[H]
	\centering
	\begin{tabular}{``
	const len = m[3],
		math = m[1];
	let	format = "c";
		for(let i = 0; i < len - 1; i++)
			format += "c"
		rv = snip.tabstop(3, format);
	``}
	    \toprule
		``
		const nrow = m[2],
			ncol = m[3];
		let order = 4,
			r = "";
			for (let i = 0; i < nrow - 1; i++) {
				for(let j = 0; j < ncol - 1; j++) 
					r += (math ? "\\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " & ";
				r += (math ? " \\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " \\\\\\\n	";
				if (!i) r += "	\\midrule\n	";
				r += `	`;
			}	
			for(let j = 0; j < ncol - 1; j++)
				r += (math ? "\\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " & ";
			r += (math ? "\\( " : "") + snip.tabstop(order++) + (math ? " \\)" : "") + " \\\\\\";
			rv = r;
		``
    	\bottomrule
	\end{tabular}
	\caption{${2:caption}}
	\label{Table \thetable}
\end{table}
endsnippet

snippet `\\(([nm])?(?:algorithm|corollary|definition|example|exercise|explanation|lemma|proof|property|proposition|theorem)|(?:align\*|answer|claim|conjecture|goal|idea|intuition|investigation|notation|note|notice|observation|problem|question|recall|remark|solution|split|summary))$` "Common Environments" A
``
const name = getElse(environments[2], m[1]),
	label = capitalise(name) + " \\the" + name,
	toc = !environments[0].has(m[1]), 
	nam = m[2] == 'm', 
	num = !environments[1].has(m[1]);
let	order = 1;
	rv = `\\begin{${name}}`
	+ `${(toc ? `[\\texorpdfstring{${snip.tabstop(order)}}{}]` : "")}` 
	+ `${(num ? `\\label{${label}}\n` : "")}` 
	+ `${(toc ? `\\addcontentsline{toc}{subsection}{\\texorpdfstring{${label} \\ - ${snip.tabstop(order)}}{${label} \\ - ${snip.tabstop(order++)}}}\n` : "")}`
	+ `${(nam ? `\\addcontentsline{toc}{subsection}{\\texorpdfstring{${label}}{${label}}}\n` : "")}`
	+ `${num ? "" : "\n"}${snip.tabstop(0)}\n`
	+ `\\end{${name}}`;
``
endsnippet

context list(context)
snippet `(?<=\\item ).*(?:\\item)$` "Add List Item (Single Line)" A
``
const fixedBrackets = formatStr(m[0]).replace("\\item", "");
rv = `${snip.tabstop(1, fixedBrackets)}\n\\item `;
``
endsnippet

# context listFlag
# snippet `^((?:\s)*)(?:\\item )((.|\n))*(?:\\item)$` "Add List Item (Multi-line)" MA
# ``
# const fixedBrackets = formatStr(m[0]);
# let firstLineWhitespace = m[1];
# const splitByLineTrimmed = fixedBrackets.split("\n").map((e) => {
# 		const nonWhite = e.search(/[^\s]/g);
# 		if (nonWhite != -1 && nonWhite < firstLineWhitespace.length)
# 			firstLineWhitespace = e.substring(0, nonWhite);
# 		return e;
# 		}),
# 	rejoinedFormatted = splitByLineTrimmed.join("\n");
# let counter = 0,
# 	index = rejoinedFormatted.length,
# 	output = "",
# 	begs = rejoinedFormatted.lastIndexOf("\\begin{enumerate\\}", index),
# 	ends = rejoinedFormatted.lastIndexOf("\\end{enumerate\\}", index),
# 	items = rejoinedFormatted.lastIndexOf("\\item", index - 6);

# if (items > begs && items > ends) {
# 	const sliced = rejoinedFormatted.slice(0, -5);
# 	index = sliced.lastIndexOf("\\item", index);
# 	output = sliced.slice(0, index + 6) + snip.tabstop(1, sliced.slice(index + 6)) + "\n" + firstLineWhitespace + "\\item ";
# }

# while (!output && (begs != -1 || ends != -1)) {
# 	begs = rejoinedFormatted.lastIndexOf("\\begin{enumerate\\}", index);
# 	ends = rejoinedFormatted.lastIndexOf("\\end{enumerate\\}", index);
# 	if (ends > begs) {
# 		counter++;
# 		index = ends - 1;
# 	} else if (begs > ends) {
# 		counter--;
# 		index = begs - 1;
# 	}
# 	if (counter < 0) {
# 		output = rejoinedFormatted;
# 		counter = 0;
# 	} else if (counter == 0) {
# 		items = rejoinedFormatted.lastIndexOf("\\item", index);
# 		begs = rejoinedFormatted.lastIndexOf("\\begin{enumerate\\}", index);
# 		ends = rejoinedFormatted.lastIndexOf("\\end{enumerate\\}", index);
# 		if (items > begs && items > ends) {
# 			index = rejoinedFormatted.lastIndexOf("\\item", index);
# 			firstLineWhitespace = "";
# 			let i = index - 1;
# 			while (rejoinedFormatted.charAt(i) != '\n' && /\s/.test(rejoinedFormatted.charAt(i))) {
# 				firstLineWhitespace += rejoinedFormatted.charAt(i);
# 				i--;
# 			}
# 			output = rejoinedFormatted.slice(0, index + 6) + snip.tabstop(1, rejoinedFormatted.slice(index + 6, -5)) + "\n" + firstLineWhitespace + "\\item";
# 		}
# 	}
# }
# if (!counter && !output)
# 	output = snip.tabstop(1, rejoinedFormatted.slice(0, -5)) + "\n" + firstLineWhitespace + "\\item ";
# else if (counter && !output)
# 	output = rejoinedFormatted;

# rv = output;
# ``
# endsnippet
